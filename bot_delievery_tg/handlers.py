import json
from pathlib import Path
import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from keyboards import *
from states import RegisterAccount, OrderFood
from models import OrderItem

router = Router()

USERS_FILE = Path("users.json")
SESSIONS_FILE = Path("sessions.json")

# --- –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
users_db = {}
current_sessions = {}
login_attempts = {}
user_cart = {}

# --- helpers ---
def load_json(file_path: Path, default=None, key_int: bool = False):
    """–ó–∞–≥—Ä—É–∑–∫–∞ JSON —Å —Ñ–∞–π–ª–∞, –∫–ª—é—á–∏ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ int –µ—Å–ª–∏ key_int=True"""
    default = default or {}
    if not file_path.exists():
        return default
    try:
        with file_path.open("r", encoding="utf-8") as f:
            data = json.load(f)
        if key_int:
            return {int(k): v for k, v in data.items()}
        return data
    except Exception:
        return default

def save_json(file_path: Path, data: dict, key_str: bool = False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª, –∫–ª—é—á–∏ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ str –µ—Å–ª–∏ key_str=True"""
    try:
        if key_str:
            data = {str(k): v for k, v in data.items()}
        with file_path.open("w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {file_path}: {e}")

def is_valid_username(u: str) -> bool:
    return bool(re.fullmatch(r"[A-Za-z0-9_]{3,16}", u))  # –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã

def password_ok(p: str) -> bool:
    """–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª"""
    return len(p) >= 8 and bool(re.search(r"[A-Z]", p)) and bool(re.search(r"[!@#$%^&*]", p))

async def proceed_to_password(state: FSMContext, action: str, username: str):
    await state.update_data(username=username)
    await state.set_state(RegisterAccount.waiting_for_password)
    msg = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
    if action == "register":
        msg += " (–º–∏–Ω 8 —Å–∏–º–≤–æ–ª–æ–≤, 1 –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞, 1 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª !@#$%^&*)"
    await state.get_data()
    await state.update_data(username=username)
    return msg

def require_login(chat_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç username, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ None"""
    return current_sessions.get(chat_id)

# --- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
users_db = load_json(USERS_FILE, default={})
current_sessions = load_json(SESSIONS_FILE, default={}, key_int=True)

# --- START ---
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    chat = message.chat.id
    if chat in current_sessions:
        user = current_sessions[chat]
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user}!", reply_markup=account_logged_in_kb)
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Game Delivery.", reply_markup=main_menu_kb)


# --- ACCOUNT MENU ---
@router.message(F.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
async def account_menu(message: Message, state: FSMContext):
    await state.clear()
    user = current_sessions.get(message.chat.id)
    if user:
        await message.answer(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user}", reply_markup=account_logged_in_kb)
    else:
        await message.answer("–†–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=account_unauth_kb)


# --- BACK BUTTONS ---
BACK_MAP = {
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é": ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É": ("–†–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–∞:", account_logged_in_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º": ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", restaurants_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–ª—é–¥–∞–º": ("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", game_burger_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—à–∫–µ": ("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—à–∫—É:", fries_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ—É—Å—É": ("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—É—Å:", sauce_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–∏—Ç–∫—É": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", drink_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–∫–∞–º": ("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É:", add_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É": ("–í–∞—à –±–∞–ª–∞–Ω—Å:", balance_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ": ("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:", cart_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ Pizza Hub": ("–ú–µ–Ω—é Pizza Hub:", pizza_hub_menu_kb),
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∏—Ü—Ü—ã": ("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É:", pizza_choices_kb),
}

@router.message(F.text.in_(BACK_MAP.keys()))
async def universal_back(message: Message, state: FSMContext):
    await state.clear()
    text, kb = BACK_MAP[message.text]
    await message.answer(text, reply_markup=kb)


# --- REGISTRATION & LOGIN ---
@router.message(F.text.in_(["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—Ö–æ–¥"]))
async def start_auth(message: Message, state: FSMContext):
    await state.clear()
    action = "register" if message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" else "login"

    user = current_sessions.get(message.chat.id)
    if user:
        await message.answer(f"–í—ã —É–∂–µ –≤–æ—à–ª–∏ –∫–∞–∫ {user}. –î–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return

    await state.update_data(action=action)
    await state.set_state(RegisterAccount.waiting_for_username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º:")

# --- HANDLE USERNAME ---
@router.message(RegisterAccount.waiting_for_username)
async def handle_username(message: Message, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")
    username = message.text.strip()

    if not is_valid_username(username):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º. –î–æ–ø—É—Å—Ç–∏–º—ã –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ _")
        return

    if action == "register":
        if username in users_db:
            await message.answer("–¢–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
    elif action == "login":
        if username not in users_db:
            await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.")
            return
        login_attempts.setdefault(username, 3)

    msg = await proceed_to_password(state, action, username)
    await message.answer(msg)


# --- HANDLE PASSWORD & REGISTRATION CONFIRMATION ---
@router.message(RegisterAccount.waiting_for_password)
async def handle_password(message: Message, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")
    username = data.get("username")
    password = message.text.strip()

    if action == "register":
        if not password_ok(password):
            await message.answer(
                "–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª (!@#$%^&*)"
            )
            return
        await state.update_data(password=password)
        await state.set_state(RegisterAccount.waiting_for_password_confirmation)
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

    elif action == "login":
        if username not in users_db or "password" not in users_db[username]:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        if password != users_db[username]["password"]:
            login_attempts[username] = login_attempts.get(username, 3) - 1
            if login_attempts[username] <= 0:
                await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                return
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {login_attempts[username]}")
            return

        # —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        current_sessions[message.chat.id] = username
        save_json(SESSIONS_FILE, current_sessions, key_str=True)
        await state.clear()
        await message.answer(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {username}.", reply_markup=account_logged_in_kb)


@router.message(RegisterAccount.waiting_for_password_confirmation)
async def handle_password_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()
    password = data.get("password")
    confirm = message.text.strip()
    username = data.get("username")

    if password != confirm:
        await message.answer("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞.")
        await state.set_state(RegisterAccount.waiting_for_password)
        return

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_db[username] = {
        "password": password,
        "balance": 0.0,
        "bonuses": 0,
        "orders": []
    }
    save_json(USERS_FILE, users_db)

    # —Å—Ä–∞–∑—É –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
    current_sessions[message.chat.id] = username
    save_json(SESSIONS_FILE, current_sessions, key_str=True)

    await state.clear()
    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–æ—à–ª–∏ –∫–∞–∫ {username}.",
        reply_markup=account_logged_in_kb
    )



# --- LOGOUT ---
@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
async def logout_handler(message: Message):
    chat = message.chat.id
    current_sessions.pop(chat, None)
    save_json(Path(SESSIONS_FILE), current_sessions, key_str=True)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=main_menu_kb)


# --- BALANCE ---
@router.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def my_balance(message: Message):
    chat = message.chat.id
    user = require_login(chat)
    if not user:
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return
    bal = users_db[user]["balance"]
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal:.2f}$", reply_markup=balance_menu_kb)


@router.message(F.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def top_up_start(message: Message):
    chat = message.chat.id
    user = require_login(chat)
    if not user:
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_kb)


@router.message(F.text.in_(["üí≥ –ö–∞—Ä—Ç–∞", "üåç PayPal", "‚Çø –ö—Ä–∏–ø—Ç–∞"]))
async def top_up_process(message: Message):
    chat = message.chat.id
    user = require_login(chat)
    if not user:
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return

    AMOUNT = 10.0  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    users_db[user]["balance"] += AMOUNT
    save_json(Path(USERS_FILE), users_db)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {AMOUNT:.2f}$. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_db[user]['balance']:.2f}$",
        reply_markup=account_logged_in_kb
    )

# --- RESTAURANTS ---
@router.message(F.text == "üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã")
async def restaurants_list(message: Message, state: FSMContext):
    user = require_login(message.chat.id)
    if not user:
        await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=restaurants_menu_kb)


@router.message(F.text == "Game Burger")
async def game_burger_menu(message: Message, state: FSMContext):
    if not require_login(message.chat.id):
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return

    await state.clear()
    await message.answer("–ú–µ–Ω—é Game Burger:", reply_markup=game_burger_menu_kb)
    await state.set_state(OrderFood.waiting_for_dish)

@router.message(F.text == "Pizza Hub")
async def pizza_hub_menu(message: Message, state: FSMContext):
    if not require_login(message.chat.id):
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return
    await state.clear()
    await message.answer("–ú–µ–Ω—é Pizza Hub:", reply_markup=pizza_hub_menu_kb)
    await state.set_state(OrderFood.waiting_for_pizza_choice)  





# --- PRICES ---
DISH_PRICES = {"–ì–µ–π–º —á–∏–∑–±—É—Ä–≥–µ—Ä":6.99,"–î–∞–±–ª –≥–µ–π–º —á–∏–∑–±—É—Ä–≥–µ—Ä":10.99,"–ù–∞–≥–≥–µ—Ç—Å—ã 6 —à—Ç":6.99,"–ù–∞–≥–≥–µ—Ç—Å—ã 12 —à—Ç":10.99}
FRIES_PRICES = {"–û–±—ã—á–Ω–∞—è —Ñ—Ä–∏":2.99,"–î–∏–ø—Å—ã":1.49}
SAUCE_PRICES = {"–ö–∞—Ä–∏":0.69,"–°—ã—Ä–Ω—ã–π":0.69,"–ö–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π":0.69,"–ë–µ–∑ —Å–æ—É—Å–∞":0.0}
DRINK_PRICES = {"–ö–æ–ª–∞":1.99,"–§–∞–Ω—Ç–∞":1.99,"–°–ø—Ä–∞–π—Ç":1.99,"–ë–µ–∑ –Ω–∞–ø–∏—Ç–∫–∞":0.0}
ADD_PRICES = {"–û–≥—É—Ä—á–∏–∫–∏":0.0,"–ë–µ–∫–æ–Ω":0.69,"–°—ã—Ä":0.69,"–ù–∏—á–µ–≥–æ":0.0}
REMOVE_PRICES = {"–°–æ–ª—å": 0.0, "–û–≥—É—Ä—á–∏–∫–∏": 0.0, "–õ—É–∫": 0.0, "–°—ã—Ä": 0.0, "–ö–æ—Ç–ª–µ—Ç—É": 0.0, "–ù–∏—á–µ–≥–æ": 0.0}


def calculate_item_price(item: OrderItem) -> float:
    return (
        DISH_PRICES.get(item.dish, 0) +
        FRIES_PRICES.get(item.fries, 0) +
        SAUCE_PRICES.get(item.sauce.split(" -")[0] if item.sauce else "–ë–µ–∑ —Å–æ—É—Å–∞", 0) +
        DRINK_PRICES.get(item.drink, 0) +
        ADD_PRICES.get(item.add.split(" -")[0] if item.add else "–ù–∏—á–µ–≥–æ", 0)
    )


# --- PIZZA HUB ---
PIZZA_PRICES = {"–ü–µ–ø–ø–µ—Ä–æ–Ω–∏":10.99,"4 —Å—ã—Ä–∞":11.99,"–ë–æ–≤–∞—Ä—Å–∫–∞—è":12.99,"–ú—è—Å–Ω–∞—è":13.99}
PIZZA_SIZE_MULTIPLIER = {"30 —Å–º":1, "60 —Å–º":1.8}
DRINK_PRICES_PIZZA = {"–ö–æ–ª–∞":1.99,"–§–∞–Ω—Ç–∞":1.99,"–°–ø—Ä–∞–π—Ç":1.99,"–ë–µ–∑ –Ω–∞–ø–∏—Ç–∫–∞":0.0}

def calculate_pizza_total(pizza_name: str, size: str, drink: str) -> float:
    base = PIZZA_PRICES.get(pizza_name, 0)
    multiplier = PIZZA_SIZE_MULTIPLIER.get(size, 1)
    drink_price = DRINK_PRICES_PIZZA.get(drink, 0)
    return round(base * multiplier + drink_price, 2)

# --- ORDER FLOW ---
@router.message(OrderFood.waiting_for_dish)
async def order_choose_dish(message: Message, state: FSMContext):
    dish = message.text.strip()
    if dish not in DISH_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é.")
        return
    await state.update_data(dish=dish)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—à–∫—É:", reply_markup=fries_menu_kb)
    await state.set_state(OrderFood.waiting_for_fries)

@router.message(OrderFood.waiting_for_fries)
async def order_choose_fries(message: Message, state: FSMContext):
    choice = message.text.strip()
    if choice not in FRIES_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—à–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(fries=choice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—É—Å:", reply_markup=sauce_menu_kb)
    await state.set_state(OrderFood.waiting_for_sauce)

@router.message(OrderFood.waiting_for_sauce)
async def order_choose_sauce(message: Message, state: FSMContext):
    choice = message.text.strip().split(" -")[0]
    if choice not in SAUCE_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(sauce=choice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=drink_menu_kb)
    await state.set_state(OrderFood.waiting_for_drink)

@router.message(OrderFood.waiting_for_drink)
async def order_choose_drink(message: Message, state: FSMContext):
    choice = message.text.strip().split(" -")[0]
    if choice not in DRINK_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(drink=choice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É:", reply_markup=add_menu_kb)
    await state.set_state(OrderFood.waiting_for_add)

@router.message(OrderFood.waiting_for_add)
async def order_choose_add(message: Message, state: FSMContext):
    choice = message.text.strip().split(" -")[0]
    if choice not in ADD_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(add=choice)
    await message.answer("–ß—Ç–æ —É–±—Ä–∞—Ç—å? (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", reply_markup=remove_menu_kb)
    await state.set_state(OrderFood.waiting_for_remove)

@router.message(OrderFood.waiting_for_remove)
async def order_choose_remove(message: Message, state: FSMContext):
    user_input = message.text.strip().split(" -")[0]  # –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

    if user_input not in REMOVE_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=remove_menu_kb)
        return

    await state.update_data(remove=user_input)
    data = await state.get_data()

    # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    item = OrderItem(
        dish=data["dish"],
        dish_price=DISH_PRICES.get(data["dish"], 0),  # –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –±–ª—é–¥–∞
        fries=data.get("fries"),
        sauce=data.get("sauce"),
        drink=data.get("drink"),
        add=data.get("add"),
        remove=data.get("remove")
    )

    # –ø–µ—Ä–µ—Å—á—ë—Ç —Ü–µ–Ω—ã
    item.price = calculate_item_price(item)

    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    chat = message.chat.id
    user_cart.setdefault(chat, []).append(item)

    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n{item.details()}", reply_markup=main_menu_kb)





# --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ Pizza Hub ---
@router.message(OrderFood.waiting_for_pizza_choice)
async def pizza_choices_handler(message: Message, state: FSMContext):
    if message.text == "üçï –ü–∏—Ü—Ü–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É:", reply_markup=pizza_choices_kb)
        return
    pizza = message.text.strip()
    if pizza not in PIZZA_PRICES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(pizza=pizza)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã:", reply_markup=pizza_size_kb)
    await state.set_state(OrderFood.waiting_for_size)

@router.message(OrderFood.waiting_for_size)
async def choose_pizza_size(message: Message, state: FSMContext):
    size = message.text.strip()
    if size not in PIZZA_SIZE_MULTIPLIER:  # "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∏—Ü—Ü—ã" ‚Äî universal_back
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(size=size)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=drink_menu_pizza_kb)
    await state.set_state(OrderFood.waiting_for_drink_pizza)

@router.message(OrderFood.waiting_for_drink_pizza)
async def choose_pizza_drink(message: Message, state: FSMContext):
    drink = message.text.strip()
    if drink not in DRINK_PRICES_PIZZA:  # "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ Pizza Hub" –∏–ª–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∏—Ü—Ü—ã" ‚Äî universal_back
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(drink=drink)
    data = await state.get_data()
    total_price = calculate_pizza_total(data["pizza"], data["size"], data["drink"])

    item = OrderItem(
        dish=data["pizza"],
        dish_price=total_price,
        fries=None,
        sauce=None,
        drink=data["drink"],
        add=None,
        remove=None
    )

    chat = message.chat.id
    user_cart.setdefault(chat, []).append(item)
    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n{item.details()}", reply_markup=main_menu_kb)


# --- UNIVERSAL ACCOUNT ACTIONS (—Å –æ—Ç–ª–∞–¥–∫–æ–π) ---
@router.message(F.text.in_(["üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "üéÅ –ú–æ–∏ –±–æ–Ω—É—Å—ã", "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"]))
async def universal_account_actions(message: Message, state: FSMContext):
    chat = message.chat.id
    state_data = await state.get_state()
    print(f"[DEBUG] chat {chat} pressed '{message.text}', current state: {state_data}")
    
    await state.clear()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM

    user = current_sessions.get(chat)
    if not user:
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return

    text = message.text

    if text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        orders = users_db[user].get("orders", [])
        if not orders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=account_logged_in_kb)
            return
        msg = ""
        for idx, order in enumerate(orders, 1):
            items_text = "\n".join(order["items"])
            msg += f"–ó–∞–∫–∞–∑ #{idx}:\n{items_text}\n–°—É–º–º–∞: {order['total']:.2f}$\n–û–ø–ª–∞—Ç–∞: {order['payment']}\n\n"
        await message.answer(msg, reply_markup=account_logged_in_kb)

    elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        bal = users_db[user]["balance"]
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal:.2f}$", reply_markup=balance_menu_kb)

    elif text == "üéÅ –ú–æ–∏ –±–æ–Ω—É—Å—ã":
        bonuses = users_db[user].get("bonuses", 0)
        await message.answer(f"üéÅ –£ –≤–∞—Å {bonuses} –±–æ–Ω—É—Å–æ–≤.", reply_markup=bonuses_menu_kb)

    elif text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞":
        current_sessions.pop(chat, None)
        save_json(Path(SESSIONS_FILE), current_sessions, key_str=True)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=main_menu_kb)

    



# --- CART ---
@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message):
    chat = message.chat.id
    items = user_cart.get(chat, [])
    if not items:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb)
        return
    text = "\n\n".join([f"{i.dish} - {i.price:.2f}$" for i in items])
    await message.answer(f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{text}", reply_markup=cart_menu_kb)

@router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: Message):
    chat = message.chat.id
    user_cart[chat] = []
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_menu_kb)





# --- –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ---
@router.message(F.text == "üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout_start(message: Message, state: FSMContext):
    chat = message.chat.id
    user = current_sessions.get(chat)
    if not user:
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        return

    items = user_cart.get(chat, [])
    if not items:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb)
        return

    total = sum(item.price for item in items)
    await state.update_data(checkout_total=total, checkout_chat=chat)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É –∏ –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
    await message.answer(
        f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total:.2f}$\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_choice_kb
    )
    await state.set_state(OrderFood.waiting_for_payement_choice)


# --- –í–´–ë–û–† –û–ü–õ–ê–¢–´ ---
@router.message(OrderFood.waiting_for_payement_choice)
async def process_checkout_payment(message: Message, state: FSMContext):
    chat = message.chat.id
    user = current_sessions.get(chat)
    if not user:
        await message.answer("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=account_unauth_kb)
        await state.clear()
        return

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ":
        await state.clear()
        items = user_cart.get(chat, [])
        if not items:
            await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb)
        else:
            text = "\n\n".join([f"{i.dish} - {i.price:.2f}$" for i in items])
            await message.answer(f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{text}", reply_markup=cart_menu_kb)
        return

    items = user_cart.get(chat, [])
    if not items:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb)
        await state.clear()
        return

    total = sum(i.price for i in items)

    if message.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º":
        if users_db[user]["balance"] < total:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=balance_menu_kb)
            return
        users_db[user]["balance"] -= total
        users_db[user]["bonuses"] += 100
        payment_str = f"{total:.2f} $"
    elif message.text == "üéÅ –û–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏":
        if users_db[user]["bonuses"] < 500:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ (–Ω—É–∂–Ω–æ 500).", reply_markup=bonuses_menu_kb)
            return
        users_db[user]["bonuses"] -= 500
        payment_str = "500 –±–æ–Ω—É—Å–æ–≤"
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
    order_summary = [i.details() for i in items]
    users_db[user].setdefault("orders", []).append({
        "items": order_summary,
        "total": total,
        "payment": payment_str
    })

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    user_cart[chat] = []
    save_json(Path(USERS_FILE), users_db) 

    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–°–ø–∏—Å–∞–Ω–æ: {payment_str}.\n"
        f"{'–ù–∞—á–∏—Å–ª–µ–Ω–æ 100 –±–æ–Ω—É—Å–æ–≤.' if message.text == 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º' else ''}\n\n"
        f"üíµ –ë–∞–ª–∞–Ω—Å: {users_db[user]['balance']:.2f}$\n"
        f"üéÅ –ë–æ–Ω—É—Å—ã: {users_db[user]['bonuses']}",
        reply_markup=main_menu_kb
    )
    await state.clear

